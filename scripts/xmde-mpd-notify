#!/usr/bin/perl -l
#
#   Listen on mpd to detect music changes or play and display a notification.
#   The listening and fetching of song information is done with mpc.
#   This script expect to find the song cover picture and the song file under
#   the same directory. It peeks the first JPEG or PNG file it sees in this
#   directory.
#

use strict;
use warnings;

use File::Temp qw(:POSIX);
use File::Which;
use POSIX qw(:sys_wait_h);


my %KILL_LIST;


sub findConfigDirectoryMpd
{
    my ($cpath, $mpdconf, $fh, $line, $ret);

    $cpath = $ENV{'XDG_CONFIG_HOME'};
    if (!defined($cpath) || ($cpath eq '')) {
	$cpath = $ENV{'HOME'} . '/.config';
    }

    if (-f ($cpath . '/mpd/mpd.conf')) {
	$mpdconf = $cpath . '/mpd/mpd.conf';
    } elsif (-f ($ENV{'HOME'} . '/.mpdconf')) {
	$mpdconf = $ENV{'HOME'} . '/.mpdconf';
    } elsif (-f '/etc/mpd.conf') {
	$mpdconf = '/etc/mpf.conf';
    } else {
	return undef;
    }

    if (!open($fh, '<', $mpdconf)) {
	return undef;
    }

    while (defined($line = <$fh>)) {
	chomp($line);

	if ($line =~ /^\s*music_directory\s+(["']?.*\S['"]?)\s*$/) {
	    $ret = $1;
	    last;
	}
    }

    close($fh);

    if (!defined($ret)) {
	return undef;
    }

    $ret =~ s/^['"]//;
    $ret =~ s/['"]$//;

    if ($ret =~ /^~(.*)$/) {
	$ret = $ENV{HOME} . $1;
    }

    return $ret;
}

sub findMusicDirectoryXdg {
    my ($ret);

    if (defined(which('xdg-user-dirs'))) {
	$ret = `xdg-user-dirs 'MUSIC'`;
	chomp($ret);
	return $ret;
    }

    return undef;
}

sub findMusicDirectory {
    my ($ret);

    $ret = findConfigDirectoryMpd();
    if (defined($ret)) {
	return $ret;
    }

    $ret = findMusicDirectoryXdg();
    if (defined($ret)) {
	return $ret;
    }

    return undef;
}

sub status()
{
    my ($line);

    foreach $line (split("\n", `mpc status`)) {
	if ($line =~ m|^\[([^\]]+)\]|) {
	    return $1;
	}
    }

    return undef;
}

sub notify
{
    my ($mdir) = @_;
    my ($cur, $file, $title, $artist, $album, @cmd);
    my ($dir, $dh, @imgs, $cover, $covlnk, $msg, $sep);

    $cur = `mpc current --format='[%file%]\n[%title%]\n[%artist%]\n[%album%]'`;
    chomp($cur);

    @cmd = ('notify-send', '-a', 'xmde-mpd-notify');
    ($file, $title, $artist, $album) = split("\n", $cur);

    if ($file ne '') {
	$dir = $file;
	$dir =~ s|/[^/]*$||;

	if (opendir($dh, $mdir . '/' . $dir)) {
	    @imgs = grep { m/\.(jpe?g|png)$/ } readdir($dh);
	    closedir($dh);
	}

	if (scalar(@imgs) >= 1) {
	    $cover = $mdir . '/' . $dir . '/' . $imgs[0];
	}

	if (defined($cover) && ($cover =~ m|,|)) {
	    $covlnk = tmpnam();
	    symlink($cover, $covlnk);
	    $cover = $covlnk;
	}

	if (defined($cover)) {
	    push(@cmd, '-i', $cover);
	}
    }

    if ($title eq '') {
	push(@cmd, '(Unknown Song)');
    } else {
	push(@cmd, $title);
    }

    $msg = '';
    $sep = '';

    if ($artist ne '') {
	$msg = $artist;
	$sep = ' - ';
    }

    if ($album ne '') {
	$msg .= $sep . $album;
    }

    if ($msg ne '') {
	push(@cmd, $msg);
    }

    system(@cmd);

    if (defined($covlnk)) {
	unlink($covlnk);
    }
}

sub react
{
    my ($pid, $fh, $line, $mdir);

    if (!which('mpc')) {
	return;
    }

    $mdir = findMusicDirectory();
    if (!defined($mdir)) {
	printf(STDERR "%s: cannot find mpd music directory\n", $0);
	return;
    }

  restart:
    $pid = open($fh, '-|');
    if ($pid == 0) {
	exec ('mpc', 'idleloop');
	die ($!)
    }

    $KILL_LIST{$pid} = 1;

    while (1) {
	if (!defined($line = <$fh>)) {
	    if (waitpid($pid, WNOHANG) == $pid) {
		delete($KILL_LIST{$pid});
		sleep(1);
		goto restart;
	    } else {
		next;
	    }
	}

	chomp($line);
	if (!($line =~ /player/)) {
	    next;
	}

	if (status() eq 'playing') {
	    notify($mdir);
	}
    }
}

sub killList
{
    my ($pid);

    foreach $pid (keys(%KILL_LIST)) {
	kill('INT', $pid);
    }

    exit (0);
}

sub main
{
    $SIG{'INT'} = \&killList;
    $SIG{'QUIT'} = \&killList;
    $SIG{'TERM'} = \&killList;

    react();
}

exit (main(@ARGV));
__END__
